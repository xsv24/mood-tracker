{"version":3,"sources":["config.ts","api/index.ts","components/Row.tsx","components/Col.tsx","components/Input.tsx","utils.ts","components/Button.tsx","hooks/useMount.ts","hooks/useFetch.ts","components/Label.tsx","components/Loader.tsx","contexts/UserContext.tsx","routes/Auth.tsx","contexts/ConfigContext.tsx","hooks/useSelector.tsx","components/Mood.tsx","components/Chip.tsx","components/Emotions.tsx","components/Container.tsx","routes/Entry.tsx","components/Date.tsx","components/EntryLog.tsx","components/Percent.tsx","routes/History.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["process","api","PORT","fetcher","url","method","body","Promise","resolve","token","localStorage","getItem","fetch","headers","JSON","stringify","redirect","then","res","status","navigate","json","error","statusText","catch","err","console","Row","style","className","justify","align","children","flex","display","flexDirection","justifyContent","alignItems","Col","Input","defaultValue","onChange","placeholder","type","name","label","value","e","target","classes","args","cssClass","reduce","_classes","_class","substr","length","Button","color","onClick","props","ButtonImg","img","alt","width","height","src","paddingLeft","paddingRight","useMount","effect","useEffect","useFetch","onMount","useState","setRes","loading","setLoading","canceled","finally","endPoint","Label","Loader","delay","loaded","setLoaded","delayer","setTimeout","clearTimeout","UserContext","React","createContext","user","email","setUser","updatedUser","Auth","useContext","setEmail","password","setPassword","useNavigate","authenticate","minWidth","padding","paddingTop","config","ConfigContext","moods","emotions","reducer","state","options","selected","action","payload","splice","select","unSelect","useSelector","defaultSelected","useReducer","opts","dispatch","selectItem","index","unSelectItem","toggleItem","toggle","Object","values","Mood","_id","Moods","setMood","map","m","key","Chip","Emotions","emotion","i","Container","main","Entry","mood","comments","setComments","emotionOpts","onSubmit","preventDefault","s","trim","log","alert","rows","disabled","days","months","CalendarIcon","DateRow","date","getUTCDate","fontSize","getUTCDay","getMonth","getUTCHours","getUTCMinutes","EntryLog","createdAt","Date","Percent","percent","stokeWidth","radius","stokeWidthRad","circumference","Math","PI","strokeDashoffset","x","y","stroke","fill","strokeWidth","strokeDasharray","r","cx","cy","fontWeight","textAnchor","dx","dy","HistoryHeader","entries","total","l","avg","avgMood","find","val","round","min","max","winningMood","toFixed","to","alignSelf","History","entry","App","updateUser","appConfig","loadConfig","setItem","Provider","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.37f3d01f.chunk.js","sourcesContent":["export default process.env.NODE_ENV === 'production' ? {\n    api: `http://localhost:${process.env.PORT || 8080}/api`\n} : {\n    api: `http://localhost:${process.env.PORT || 3001}/api`\n}","import { navigate } from '@reach/router';\n\nexport const fetcher = (url: string, method: 'POST' | 'GET' | 'PATCH' | 'PUT', body?: any) : Promise<any> => {\n    if(!url) return Promise.resolve();\n\n    const token = localStorage.getItem('token') || '';\n\n    return fetch(url, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': token || ''\n        },\n        method: method,\n        body: JSON.stringify(body),\n        redirect: 'follow'\n    })\n    .then(res => {\n        if(res.status === 401) {\n            navigate('/signin');\n        }\n\n        return res.status <= 400 \n            ? res.json() \n            : { error: res.statusText, status: res.status }\n    })\n    .then(res => {\n        if(res.error) {\n            throw res.error;\n        } else {\n            return res;\n        }\n    })\n    .catch(err => {\n        console.error(err);\n        throw err;\n    });\n};","import React, { FunctionComponent } from 'react';\n\ntype RowProps = {\n    style?: object,\n    className?: string,\n    justify?: 'space-between' | 'space-around' | 'flex-start' | 'flex-end' | 'center',\n    align?: 'space-between' | 'space-around' | 'flex-start' | 'flex-end' | 'center',\n    flex?: number,\n    children?: React.ReactNode\n}\n\nexport const Row: FunctionComponent<RowProps> = ({\n    style,\n    className,\n    justify = 'space-between',\n    align = 'center',\n    children,\n    flex\n}) => ( \n    <div \n        className={className}\n        style={{\n            ...style,\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: justify,\n            alignItems: align,\n            flex: flex\n        }} \n    >\n        {children}\n    </div>\n);\n\nexport default Row;","import React, { FunctionComponent } from 'react';\n\ntype ColProps = {\n    style?: object,\n    className?: string,\n    flex?: number,\n    justify?: 'space-between' | 'space-around' | 'flex-start' | 'flex-end' | 'center',\n    align?: 'space-between' | 'space-around' | 'flex-start' | 'flex-end' | 'center',\n    children: React.ReactNode\n}\n\nexport const Col: FunctionComponent<ColProps> = ({\n    style,\n    className,\n    justify = 'space-between',\n    align = 'center',\n    flex,\n    children\n}) => ( \n    <div \n        className={className}\n        style={{\n            ...style,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: justify,\n            alignItems: align,\n            flex: flex\n        }} \n    >\n        {children}\n    </div>\n);\n\nexport default Col;","import React, { FunctionComponent } from 'react';\n\ntype InputProps = {\n    value: string,\n    name: string,\n    type?: string\n    onChange: Function,\n    defaultValue?: string,\n    placeholder?: string,\n    className?: string,\n    label?: string\n}\n\nexport const Input: FunctionComponent<InputProps> = ({\n    defaultValue,\n    onChange,\n    className,\n    placeholder,\n    type = 'text',\n    name,\n    label,\n    value\n}) => (\n    <input\n        type={type}\n        name={name} \n        className={className} \n        defaultValue={defaultValue}\n        placeholder={placeholder || label}\n        onChange={e => onChange(e.target.value, e)}\n        value={value} \n    />\n);\n\nexport default Input;","export const classes = (...args: Array<string | undefined | null | boolean>) : string => {\n    const cssClass = args.reduce<string>((_classes, _class) => {\n        if(_class) {\n            _classes += `${_class} `;\n        }\n        return _classes;\n    }, '')\n    \n    return cssClass.substr(0, cssClass.length - 1);\n};\n\nexport const between = (val: number, min: number, max: number) => Math.max(\n    Math.min(val, max),\n    min\n);","import React, { FunctionComponent } from 'react';\nimport { Link } from '@reach/router';\n\nimport Row from './Row';\n\nimport { classes } from '../utils';\n\ntype ButtonProps = {\n    type?: \"button\" | \"submit\" | \"reset\" | undefined,\n    color?: \"primary\" | \"secondary\" | \"danger\" | \"warn\",\n    style?: object,\n    className?: string,\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n    children: React.ReactNode,\n    disabled?: boolean\n};\n\nexport const Button: FunctionComponent<ButtonProps> = ({\n    type = 'button',\n    color = 'primary',\n    className,\n    style,\n    onClick,\n    children,\n    ...props\n}) => (\n    <button \n        type={type} \n        style={style} \n        className={classes(className, color)} onClick={onClick}\n        {...props}\n    >\n        {children}\n    </button>\n);\n\ninterface ButtonImgProps extends ButtonProps {\n    img: string,\n    alt?: string\n};\n\nexport const ButtonImg: FunctionComponent<ButtonImgProps> = ({\n    img,\n    alt,\n    children,\n    ...props\n}) => (\n    <Button {...props}> \n        <Row justify='flex-start'>\n            <img width=\"24\" height=\"24\" src={img} alt={alt} />\n            <span style={{  paddingLeft: 5, paddingRight: 5 }}> \n                {children}\n            </span>\n        </Row>\n    </Button>\n);\n\ninterface RouteButtonProps extends ButtonProps {\n    route: string,\n    Tag: any,\n    img?: string\n}\n\nexport const RouteButton: FunctionComponent<RouteButtonProps> = ({\n    route,\n    Tag,\n    children,\n    ...props\n}) => (\n    <Link to={route}>\n        <Tag {...props}>\n            {children}\n        </Tag>\n    </Link>\n);\n\nexport default Button;","import { EffectCallback, useEffect } from 'react';\n\nconst useMount = (effect: EffectCallback) => {\n  useEffect(effect, []);\n};\n\nexport default useMount;","import { useState } from 'react';\n\nimport { fetcher } from '../api'\nimport useMount from '../hooks/useMount';\n\ntype UseFetchReturn = [ any, boolean, (url?: string, body?: object) => Promise<any> ];\n\ntype UseFetchProps = {\n    url?: string,\n    method?: 'POST' | 'GET' | 'PATCH' | 'PUT',\n    body?: object, \n    opts?: object,\n    defaultValue?: any,\n    done?: (res?: any) => void,\n    onMount?: boolean\n};\n\nconst useFetch = ({\n    url = '',\n    body,\n    method = 'GET',\n    defaultValue = {},\n    onMount = false\n}: UseFetchProps) : UseFetchReturn => {\n\n    const [ res, setRes ] = useState<object>(defaultValue);\n    const [ loading, setLoading ] = useState<boolean>(false);\n\n    function load(endPoint?: string, body?: object) : Promise<any> {\n        if(loading) return Promise.resolve();\n\n        setLoading(true);\n\n        return fetcher(endPoint || url, method, body)\n            .then(res => {\n                setRes(res);\n                return res;\n            })\n            .catch(err => {\n                defaultValue.error = err;\n                setRes(defaultValue);\n                return err;\n            })\n            .finally(() => setLoading(false));\n    }\n\n    useMount(() => {\n        let canceled = false;\n\n        if(onMount && !loading && !canceled) {\n            setLoading(true);\n\n            fetcher(url, method, body)\n                .then(res => {\n                    !canceled && setRes(res);   \n                })\n                .catch(err => {\n                    defaultValue.error = err;\n                    !canceled && setRes(defaultValue);\n                })\n                .finally(() => { \n                    !canceled && setLoading(false)\n                });\n        }\n        \n        return () => { canceled = true; };\n    });\n    \n    return [res, loading, load ];\n};\n\nexport default useFetch;","import React, { FunctionComponent } from 'react';\nimport { classes } from '../utils';\n\ntype LabelProps = {\n    for?: string,\n    style?: object,\n    className?: string,\n    color?: 'danger' | 'info' | 'warn' | 'success',\n    children: React.ReactNode,\n}\n\nexport const Label: FunctionComponent<LabelProps> = ({\n    className,\n    color,\n    style,\n    children\n}) => (\n    <label className={classes(className, color)} style={style}>\n        {children}\n    </label>\n);\n\nexport default Label;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { classes } from '../utils';\n\ntype LoaderProps = {\n    loading: boolean,\n    children?: React.ReactNode,\n    delay?: number\n};\n\nexport const Loader: FunctionComponent<LoaderProps> = ({\n    loading,\n    children,\n    delay = 500\n}) => {\n    const [ loaded, setLoaded ] = useState(loading);\n\n    useEffect(() => {\n        if(loading) {\n            setLoaded(false);\n        }\n\n        if(!loading) {\n            const delayer = setTimeout(() => {\n                setLoaded(true);\n            }, delay);\n            \n            return () => clearTimeout(delayer);\n        }\n\n    }, [ delay, loading, setLoaded ])\n\n    return !loaded\n        ? <div className={classes('fill', 'center', 'loader')} /> \n        : <>{children}</>\n};\n\nexport default Loader;","import React from 'react';\n\nexport type UserType = {\n    user: string,\n    email?: string,\n    token?: string,\n    setUser: (updatedUser: UserType) => void\n};\n\nconst UserContext = React.createContext<UserType>({\n    user: '',\n    email: '',\n    token: '',\n    setUser: (updatedUser: UserType) => undefined\n});\n\nexport default UserContext;","import React, { FunctionComponent, useState, useContext } from 'react';\nimport { RouteComponentProps, useNavigate } from '@reach/router'\n\nimport Row from '../components/Row';\nimport Col from '../components/Col';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\n\nimport config from '../config';\nimport useFetch from '../hooks/useFetch';\nimport Label from '../components/Label';\nimport Loader from '../components/Loader';\n\nimport UserContext from '../contexts/UserContext';\n\nconst Auth: FunctionComponent<RouteComponentProps> = () => {\n    const { setUser } = useContext(UserContext);\n    const [ email, setEmail ] = useState<string>('');\n    const [ password, setPassword ] = useState<string>('');\n    const navigate = useNavigate();\n\n    const [ res, loading, authenticate  ] = useFetch({\n        method: 'POST',\n        body: { email, password }\n    });\n\n    function onLogin() : void {\n        authenticate(`${config.api}/signin`, { email, password })\n            .then(user => {\n                setUser(user);\n                navigate('/');\n            });\n    }\n\n    function onRegister() : void {\n        authenticate(`${config.api}/signup`, { email, password })\n            .then(user => {\n                setUser(user);\n                navigate('/');\n            });\n    }\n\n    return (\n        <Row flex={1} justify=\"center\">\n\n            <Col flex={0.4} \n                justify='flex-start' \n                align='flex-start'\n                style={{ minWidth: 120, padding: 10  }}\n            >\n                \n                <h2> LOGIN </h2>\n\n                <Input \n                    name='email' \n                    label='Email'\n                    type='email' \n                    value={email} \n                    onChange={setEmail} \n                />\n                \n                <Input \n                    name='password' \n                    label='Password'\n                    type='password' \n                    value={password} \n                    onChange={setPassword} \n                />\n                \n                <Label color={res.error && 'danger'}>\n                    {res.error}\n                </Label>\n\n                <Row style={{width: '100%', paddingTop: '1rem' }}>\n                    <Button style={{ flex: 1 }} onClick={onLogin}> Login </Button>\n                    <Button style={{ flex: 1 }} color='secondary' onClick={onRegister}> Register </Button>\n                </Row>\n            </Col>\n            <Loader loading={loading} />\n        </Row>\n    );\n};\n\nexport default Auth;","import React from 'react';\n\nexport type IdNameType = {\n    _id: number,\n    name: string\n};\n\nexport interface MoodType extends IdNameType {\n    color: string\n};\n\nexport type ConfigType = {\n    moods: MoodType[],\n    emotions: IdNameType[]\n};\n\nconst ConfigContext = React.createContext<ConfigType>({\n    moods: [],\n    emotions: []\n});\n\nexport default ConfigContext;","import { useReducer } from 'react';\n\n\ntype Action = {\n    type: string,\n    payload: any\n};\n\ntype SelectorActions = {\n    toggle: (index: number) => void,\n    select: (index: number) => void,\n    unSelect: (index: number) => void,\n    selected: any[]\n};\n\ntype SelectorReturn = [\n    any[],\n    SelectorActions\n];\n\nfunction reducer(state: any = {\n    options: [],\n    selected: {}\n}, action: Action) {\n    switch(action.type) {\n        case 'SELECT': {\n            const options = [ ...state.options ];\n            \n            const selected = { \n                ...state.selected,\n                [action.payload]: options[action.payload]\n            };\n        \n            options.splice(action.payload, 1, {\n                ...options[action.payload],\n                selected: true\n            });\n\n            return {\n                selected,\n                options\n            };\n        } \n        case 'UN_SELECT': { \n            const options = [ ...state.options ];\n            const selected = { ...state.selected };\n            \n            delete selected[action.payload];\n\n            options.splice(action.payload, 1, {\n                ...options[action.payload],\n                selected: false\n            });\n\n            return {\n                selected,\n                options\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport const select = (payload: number) : Action => ({\n    type: 'SELECT', \n    payload\n});\n\nexport const unSelect = (payload: number) : Action => ({\n    type: 'UN_SELECT', \n    payload \n});\n\nconst useSelector = (\n    options: any[] = [], \n    defaultSelected: any[] = [] \n) : SelectorReturn => {\n    \n    const [{ options: opts, selected }, dispatch] = useReducer(reducer, {  \n        options: options,\n        selected: defaultSelected\n    });\n\n    function selectItem(index: number) : void {\n        dispatch(select(index));\n    }\n\n    function unSelectItem(index: number) : void {\n        dispatch(unSelect(index));\n    }\n    \n    function toggleItem(index: number) : void {\n        if(index in selected) {\n            dispatch(unSelect(index));\n        } else {\n            dispatch(select(index));\n        }\n    }\n\n    return [\n        opts,\n        {\n            toggle: toggleItem,\n            select: selectItem,\n            unSelect: unSelectItem,\n            selected: Object.values(selected)\n        }\n    ];\n};\n\n\nexport default useSelector;","import React, { FunctionComponent } from 'react';\n\nimport { classes } from '../utils';\nimport { IdNameType } from '../contexts/ConfigContext';\nimport Row from '../components/Row';\n\nexport type MoodPropsType = {\n    _id: number,\n    name: string,\n    selected?: boolean, \n    select?: (id: number) => void\n}\n\nexport const Moods: FunctionComponent<{ \n    moods: IdNameType[],\n    setMood: (id: number) => void,\n    selected: number\n}> = ({\n    moods = [],\n    setMood,\n    selected\n}) => (\n    <Row>\n        {moods.map((m: IdNameType) => (\n            <Mood key={m._id} \n                select={setMood} \n                selected={m._id === selected} \n                {...m} \n            />\n        ))}\n    </Row>\n);\n\nexport const Mood: FunctionComponent<MoodPropsType> = ({\n    _id, \n    name,\n    selected = true,\n    select\n} : MoodPropsType ) => (\n    <div className={classes('mood', selected && 'selected')}\n        onClick={e => select && select(_id)}>\n        <img src={`/images/mood/${_id}.svg`} alt={name} />\n    </div>\n);\n\nexport default Moods;","import React from 'react';\nimport { classes } from '../utils';\n\nexport const Chip = ({\n    children,\n    selected = false,\n    onClick = () => {}\n}) => (\n    <button \n        type='button' \n        className={classes('chip', selected && 'selected')}\n        onClick={onClick}\n    >\n        <img src='/images/tick.svg' alt='ticked' />\n        \n        {children}\n    </button>\n);\n\nexport default Chip;\n","import React, { FunctionComponent } from 'react';\n\nimport Chip from './Chip';\n\ntype EmotionsProps = {\n    emotions: any[],\n    toggle: (id: number) => void\n}\n\nexport const Emotions: FunctionComponent<EmotionsProps> = ({\n    emotions,\n    toggle\n}) => (\n    <>\n        {emotions.map((emotion, i) => (\n            <Chip key={emotion._id} onClick={() => toggle(i)} selected={emotion.selected}>\n                {emotion.name}\n            </Chip>\n        ))}\n    </>\n);\n\nexport default Emotions;","import React from 'react';\n\nimport { classes } from '../utils';\n\nexport const Container = ({\n    children,\n    main = false,\n    className = ''\n}) => (\n    <div className={classes('container', main && 'main', className)}>\n        {children}\n    </div>\n);\n\nexport default Container;","import React, { FunctionComponent, useState, FormEvent, useContext } from 'react';\nimport { RouteComponentProps, useNavigate } from '@reach/router';\n\nimport { fetcher } from '../api';\nimport config from '../config';\nimport ConfigContext from '../contexts/ConfigContext';\nimport useSelector from '../hooks/useSelector';\n\nimport Moods from '../components/Mood';\nimport Emotions from '../components/Emotions';\nimport Button from '../components/Button';\nimport Container from '../components/Container';\nimport Loading from '../components/Loader';\n\ninterface EntryProps extends RouteComponentProps {\n    user: string\n}\n\n// I would usually use a library such as Formik or create my own form library to handle validation and submission\n// For the case of this project I have just done it manually\n\nconst Entry: FunctionComponent<EntryProps> = () => {\n    const navigate = useNavigate();\n    const { moods, emotions } = useContext(ConfigContext);\n\n    const [ mood, setMood ] = useState(4);\n    const [ loading, setLoading ] = useState(false);\n    const [ comments, setComments ] = useState('');\n    const [ emotionOpts, { toggle, selected } ] = useSelector(emotions);\n\n    function onSubmit(e: FormEvent) {\n        e.preventDefault();\n\n        setLoading(true);\n\n        fetcher(`${config.api}/entry`, 'POST', {\n            mood,\n            emotions: selected.map(s => s._id),\n            comments: comments.trim()\n        })\n            .then((res) => {\n                console.log(res)\n                 navigate('/')\n            })\n            .catch(() => alert('An error processing a request'))\n            .finally(() => setLoading(false))\n    }\n\n\n    return (\n        <Container main>\n            <Loading loading={loading} />\n            <h2>Mood</h2>\n\n            <form onSubmit={onSubmit}> \n                <Container>\n                    <Moods moods={moods} setMood={setMood} selected={mood} />\n                </Container>\n                <Container>\n                    <Emotions emotions={emotionOpts} toggle={toggle} />\n                </Container>\n\n                <Container>\n                    <textarea \n                        placeholder='Enter optional comment here...'\n                        value={comments}\n                        onChange={e => setComments(e.target.value)}\n                        rows={8}\n                    />\n                </Container>\n\n                <Button type='submit' disabled={!selected.length}>\n                    Save\n                </Button>\n            </form>\n            \n        </Container>\n    );\n};\n\nexport default Entry;","import React from 'react';\nimport Row from './Row';\n\nexport const days = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ];\nexport const months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\n\nexport const CalendarIcon = ({\n    children\n}) => (\n    <div className='calendar-bg'>\n        <div> {children} </div>\n    </div>\n);\n\nexport const DateRow = ({\n    date,\n    flex\n}) => (\n    <Row flex={flex} justify='flex-start'>\n        <Row justify='flex-start'>\n            <CalendarIcon>\n                {date.getUTCDate()}\n            </CalendarIcon>\n\n            <div style={{ paddingLeft: '1rem', fontSize: '1.2rem' }}>\n                {days[date.getUTCDay()] + ' ' + months[date.getMonth()]}\n            </div>\n        </Row>\n\n        <div style={{ paddingLeft: '1rem', fontSize: '1.2rem' }}>{date.getUTCHours()}:{date.getUTCMinutes()}</div>\n    </Row>\n);\n\nexport default DateRow;","import React, { FunctionComponent } from 'react';\n\nimport Row from './Row';\nimport Chip from './Chip';\nimport Container from './Container';\nimport EntryDate from './Date';\nimport { Mood, MoodPropsType } from './Mood';\n\nexport type Emotion = {\n    _id: number,\n    name: string\n};\n\nexport type EntryLogProps = {\n    _id: number,\n    mood: MoodPropsType,\n    emotions: Array<Emotion>,\n    comments: string,\n    createdAt: Date\n};\n\nexport const EntryLog: FunctionComponent<EntryLogProps> = ({\n    mood,\n    comments,\n    createdAt,\n    emotions\n}) => {\n    // would normally use moment but for the purposes of this project we will just use js dates.\n    const date = new Date(createdAt);\n    \n    return (\n        <Container className='entry'>\n            <Row>\n                <EntryDate flex={1} date={date} />\n                <Mood {...mood} />\n            </Row>\n            \n            {emotions.map(emotion => (\n                <Chip key={emotion._id}> { emotion.name } </Chip>\n            ))}\n\n            <div style={{ paddingTop: 15 }}>\n                {comments}\n            </div>\n        </Container>\n    );\n};\n\nexport default EntryLog;","import React from 'react';\n\nexport const Percent = ({\n    percent,\n    stokeWidth = 6,\n    radius = 52,\n    color=\"blue\"\n}) => {\n    const stokeWidthRad = radius - stokeWidth * 2;\n    const circumference = stokeWidthRad * 2 * Math.PI;\n    const strokeDashoffset = circumference - percent / 100 * circumference;\n    \n    return (\n        <svg\n            className=\"progress-ring\"\n            height={radius * 2}\n            width={radius * 2}\n        >\n            <circle\n                x=\"50%\" \n                y=\"50%\"\n                stroke={color}\n                fill=\"transparent\"\n                strokeWidth={stokeWidth}\n                strokeDashoffset={strokeDashoffset}\n                strokeDasharray={`${circumference} ${circumference}`}\n                r={stokeWidthRad}\n                cx={radius}\n                cy={radius}\n            >\n            </circle>\n            \n        <text style={{ fontWeight: 300 }} x=\"50%\" y=\"50%\" textAnchor=\"middle\" stroke=\"#000\" strokeWidth=\"0.5\" dx='3px' dy='5px'>\n            {percent}%\n        </text>\n\n        </svg>\n    );\n};\n\nexport default Percent;","import React, { FunctionComponent, useContext } from 'react';\nimport { RouteComponentProps, Link } from '@reach/router';\n\nimport config from '../config';\nimport { between } from '../utils';\nimport useFetch from '../hooks/useFetch';\nimport ConfigContext, { MoodType } from '../contexts/ConfigContext';\n\nimport EntryLog, { EntryLogProps } from '../components/EntryLog';\nimport Loader from '../components/Loader';\nimport { ButtonImg } from '../components/Button';\nimport Container from '../components/Container';\nimport Col from '../components/Col';\nimport Row from '../components/Row';\nimport { Mood } from '../components/Mood';\nimport Percent from '../components/Percent'\n\ntype HistoryHeaderPropsType = {\n    moods: MoodType[],\n    entries: any[]\n};\n\nexport const HistoryHeader: FunctionComponent<HistoryHeaderPropsType> = ({\n    entries = [],\n    moods = []\n}) => {\n\n    const total = entries.reduce((total: number, l : EntryLogProps) : number => (\n        total + l.mood._id\n    ), 0);\n\n    const avg = total && entries.length\n        ? (total / entries.length)\n        : 0;\n    \n    const avgMood = avg && moods.find(m => m._id === between(Math.round(avg), 1, moods.length - 1));\n    const winningMood = (avg / total * 100).toFixed(1);\n\n    return (\n        <Row flex={1}>\n            <Col flex={1} align='center'>\n\n                {entries.length > 0 && avgMood && (\n                    <>\n                        <Percent percent={winningMood} color={avgMood.color} />\n                        <Mood {...avgMood} />\n                    </>\n                )}    \n                \n                <Link to='/entry' style={{ alignSelf: 'flex-start' }}>\n                    <ButtonImg color='secondary' img='/images/add.svg'> \n                        Add New Entry\n                    </ButtonImg>\n                </Link> \n            </Col>\n        </Row>\n    );\n};\n\nconst History: FunctionComponent<RouteComponentProps> = () => {\n    const { moods } = useContext(ConfigContext);\n\n    const [ entries, loading ] = useFetch({\n        url: `${config.api}/entry`,\n        method: 'GET',\n        defaultValue: [],\n        onMount: true\n    });\n\n    return (\n        <Loader loading={loading}>\n            <Container main>\n                <Container>\n                    <HistoryHeader moods={moods} entries={entries} />\n                </Container>\n\n                {!entries.length && (\n                    <h3> Currently no entries ...  </h3>\n                )}\n                \n                {entries.map((entry: EntryLogProps) => (\n                    <EntryLog key={entry._id} {...entry} />\n                ))}\n\n            </Container>\n        </Loader>\n    );\n};\n\nexport default History","import React, { useState } from 'react';\nimport { Router, navigate } from '@reach/router';\n\nimport config from './config';\nimport { fetcher } from './api';\n\nimport Auth from './routes/Auth';\nimport Entry from './routes/Entry';\nimport History from './routes/History';\nimport useFetch from './hooks/useFetch';\nimport UserContext, { UserType } from './contexts/UserContext';\n\nimport './styles/App.scss';\n\nimport ConfigContext from './contexts/ConfigContext';\nimport Loader from './components/Loader';\nimport useMount from './hooks/useMount';\n\nfunction App() {\n  \n  const [ user, setUser ] = useState<UserType>({\n    user: '',\n    token: localStorage.getItem('token') || '',\n    setUser: updateUser\n  });\n\n  const [ appConfig, loading, loadConfig ] = useFetch({\n    url: `${config.api}/config`,\n    defaultValue: {\n      moods: [],\n      emotions: []\n    }\n  });\n\n  useMount(() => {\n    fetcher(`${config.api}/verify`, 'POST')\n      .then(() => { \n        loadConfig();\n      //  navigate('/');\n      })\n      .catch(() => {})\n  });\n\n  function updateUser(updatedUser) : void {\n    if(updatedUser.token) {\n      localStorage.setItem('token', updatedUser.token); \n    }\n\n    setUser({\n      ...user,\n      ...updatedUser\n    });\n  }\n\n  return (\n      <UserContext.Provider value={{\n        setUser: updateUser,\n        ...user\n      }}>\n        <ConfigContext.Provider value={appConfig}>\n          <header className='App-header'>\n          </header>\n          <section>\n            <Loader loading={loading}>\n              <Router>\n                  <Auth path='/signin' />\n                  <History path='/' />\n                  <Entry user={user.user} path='entry' />\n              </Router>\n            </Loader>\n          </section>\n        </ConfigContext.Provider>\n      </UserContext.Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}